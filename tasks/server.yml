---
- name: create redis working directory
  file:
    path: "{{ redis_dir }}"
    state: directory
    recurse: yes
    owner: "{{ redis_user }}"

- name: create runit directory
  file:
    path: "/etc/sv/{{ redis_service_name }}"
    state: directory
    recurse: yes
    owner: root
  when: redis_as_service and ansible_service_mgr|default() != "systemd"
  
- name: create redis runit service
  template:
    src: redis.sv.run.j2
    dest: /etc/sv/{{ redis_service_name }}/run
    mode: 0755
  register: redis_unit_file
  when: redis_as_service and ansible_service_mgr|default() != "systemd"

- name: enable runit server
  file: src=/etc/sv/{{ redis_service_name }} dest=/etc/service/{{ redis_service_name }} state=link
  when: redis_as_service and ansible_service_mgr|default() != "systemd"
  
- name: create redis systemd service
  template:
    src: "{{ item }}"
    dest: /etc/systemd/system/{{ redis_service_name }}.service
    mode: 0644
  with_first_found:
    - files:
      - "{{ ansible_os_family }}/redis.service.j2"
      - default/redis.service.j2
      paths:
        - ../templates
  register: redis_unit_file
  when: redis_as_service and ansible_service_mgr|default() == "systemd"

- name: create systemd tmpfiles configuration
  template:
    src: etc/tmpfiles.d/redis.conf.j2
    dest: /etc/tmpfiles.d/redis.conf
    mode: 0644
  when:
    - redis_as_service
    - ansible_service_mgr|default() == 'systemd'
    - (redis_pidfile|dirname).startswith('/var/run') or (redis_pidfile|dirname).startswith('/run')

- name: reload systemd daemon
  command: systemctl daemon-reload
  when:
    - redis_as_service
    - ansible_service_mgr|default() == "systemd"
    - redis_unit_file|changed

- name: set redis to start at boot
  service:
    name: "{{ redis_service_name }}"
    enabled: yes
  when: redis_as_service and ansible_service_mgr|default() == "systemd"
  
# Check then create log dir to prevent aggressively overwriting permissions
- name: check if log directory exists
  stat:
    path: "{{ redis_logfile|dirname }}"
  register: logdir
  changed_when: false
  when: redis_logfile != '""'

- name: create log directory if it does not exist
  file:
    state: directory
    path: "{{ redis_logfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_logfile != '""'
    - not logdir.stat.exists

- name: touch the log file
  file:
    state: touch
    path: "{{ redis_logfile }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when: redis_logfile != '""'

- name: check if pid directory exists
  stat:
    path: "{{ redis_pidfile|dirname }}"
  register: piddir
  changed_when: false
  when: redis_pidfile != '""'

- name: create pid directory if it does not exist
  file:
    state: directory
    path: "{{ redis_pidfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_pidfile != '""'
    - not piddir.stat.exists
    
- name: check if config  directory exists
  stat:
    path: /etc/redis/{{ redis_cluster_name }}
  register: configdir
  changed_when: false
  when: redis_cluster_name != '""'

- name: create config directory if it does not exist
  file:
    state: directory
    path: /etc/redis/{{ redis_cluster_name }}
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_pidfile != '""'
    - not configdir.stat.exists

- name: create redis config file
  template:
    src: redis.conf.j2
    dest: /etc/redis/{{redis_cluster_name}}/redis.conf
    owner: "{{ redis_user }}"
    mode: 0640
  notify:
    - "restart redis systemd {{ redis_port }}"
    - "restart redis runit {{ redis_port }}"

- name: add redis init config file
  template:
    dest: /etc/sysconfig/{{ redis_service_name }}
    src: redis.init.conf.j2
    mode: 0600
  when: ansible_os_family == "RedHat"
  notify:
    - "restart redis systemd {{ redis_port }}"
    - "restart redis runit {{ redis_port }}"
    
# Flush handlers before ensuring the service is started to prevent
# a start and then restart
- name: flush handlers to apply config changes
  meta: flush_handlers

- name: ensure redis is running with systemd
  service:
    name: "{{ redis_service_name }}"
    state: started
  when: redis_as_service and ansible_service_mgr|default() == "systemd"

- name: ensure redis is running with runit
  command:  sv start "{{ redis_service_name }}"
  when: redis_as_service and ansible_service_mgr|default() != "systemd"

